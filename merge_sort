//A[q..r]
if p<r
  q=foor((p+q)/2)
  merge_sort(A,p,q)
  merge_sort(A,q+1,r)
  merge(A,p,q,r)

//the c++ code
#include <iostream>
#include <string>
#include <cstring>
#include <vector>

using namespace std;

void merge(int a[],int p,int q,int r)
{
	int n1=q-p+1;
	int n2=r-q;
	int L[n1];
	int R[n2];
	for (int i=0;i<n1;i++)
		L[i]=a[p+i];
	for (int j=0;j<n2;j++)
		R[j]=a[q+j+1];
	L[n1]=100000000;
	R[n2]=100000000;
	int i=0;
	int j=0;
	for (int k=p;k<=r;k++)
	{
		if(L[i]<=R[j])
		{
			a[k]=L[i];
			i++;
		}
		else{
			a[k]=R[j];
			j++;
		}

	}

}
void mergeSort(int a[],int p,int r)
{
	if(p<r)
	{
		int q=(p+r)/2;
		mergeSort(a,p,q);
		mergeSort(a,q+1,r);
		merge(a,p,q,r);
	}

}


int main()
{
	int a[]={5,1,3,4,5,6,9,7,4,2};
	mergeSort(a,0,9);
	for(int i=0;i<10;i++)
	{
		cout << a[i] << "\t";
	}
	return 0;
}



//delete the mark number
#include <iostream>
#include <string>
#include <cstring>
#include <vector>

using namespace std;

void merge(int a[],int p,int q,int r)
{
	int n1=q-p+1;
	int n2=r-q;
	int L[n1];
	int R[n2];
	for (int i=0;i<n1;i++)
		L[i]=a[p+i];
	for (int j=0;j<n2;j++)
		R[j]=a[q+j+1];

	int i=0;
	int j=0;
	for (int k=p;k<=r;k++)
	{
		if(L[i]<=R[j])
		{
			a[k]=L[i];
			if(i==(n1-1))
			{
				for(k++;k<=r&&(j<=(n2-1));k++)
				{
					a[k]=R[j];
					j++;
				}
				break;
			}
			i++;
		}
		else{
			a[k]=R[j];
			if(j==(n2-1))
			{
				for(k++;k<=r&&(i<=(n1-1));k++)
				{
					a[k]=L[i];
					i++;
				}
				break;
			}
			j++;
		}

	}

}
void mergeSort(int a[],int p,int r)
{
	if(p<r)
	{
		int q=(p+r)/2;
		mergeSort(a,p,q);
		mergeSort(a,q+1,r);
		merge(a,p,q,r);
	}

}


int main()
{
	int a[]={5,1,3,4,5,6,9,7,4,2};
	mergeSort(a,0,9);
	for(int i=0;i<10;i++)
	{
		cout << a[i] << "\t";
	}
	return 0;
}
